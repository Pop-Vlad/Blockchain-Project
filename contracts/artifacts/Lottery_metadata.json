{
	"compiler": {
		"version": "0.5.17+commit.d19bba13"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOfOwner",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "boostPrize",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nrTickets",
						"type": "uint256"
					}
				],
				"name": "buyTickets",
				"outputs": [],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getExchangeFee",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getPool",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getPrize",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getRetainedPrize",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getTicketPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "isOwner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint8[]",
						"name": "numbers",
						"type": "uint8[]"
					}
				],
				"name": "tryTicket",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					},
					{
						"internalType": "uint8[]",
						"name": "",
						"type": "uint8[]"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint8",
						"name": "newFee",
						"type": "uint8"
					}
				],
				"name": "updateFee",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint8",
						"name": "newRetainedPrize",
						"type": "uint8"
					}
				],
				"name": "updateRetainedPrize",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "withdrawEarnings",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"allowance(address,address)": {
					"details": "See `IERC20.allowance`."
				},
				"approve(address,uint256)": {
					"details": "See `IERC20.approve`.      * Requirements:      * - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See `IERC20.balanceOf`."
				},
				"boostPrize()": {
					"details": "Adds tokens to the `__totalSupply` after the price was paid. The payer won't recieve anything in exchange.    * Returns an integer indicating the number of tokens that were added to the _totalSupply."
				},
				"buyTickets(uint256)": {
					"details": "Adds a token to the balance of the function caller if the price was paid and moves the surplus back to the sender if they paid too much."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller.      * This is an alternative to `approve` that can be used as a mitigation for problems described in `IERC20.approve`.      * Emits an `Approval` event indicating the updated allowance.      * Requirements:      * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"getExchangeFee()": {
					"details": "Returns an integer value indicating the current `exchangeFee`(2% by default)."
				},
				"getPrize()": {
					"details": "Returns an integer value indicating the prize pool in ETH(80% of the `_totalSupply` with 2% `exchangeFee` by default)."
				},
				"getRetainedPrize()": {
					"details": "Returns an integer value indicating the current `retainPrize`(20% by default), which will be held for the next prize pool, after someone wins the current one."
				},
				"getTicketPrice()": {
					"details": "Returns an integer value indicating the current `ticketPrice`(0.001 ETH by default)."
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller.      * This is an alternative to `approve` that can be used as a mitigation for problems described in `IERC20.approve`.      * Emits an `Approval` event indicating the updated allowance.      * Requirements:      * - `spender` cannot be the zero address."
				},
				"isOwner()": {
					"return": "true if `msg.sender` is the owner of the contract."
				},
				"owner()": {
					"return": "the address of the owner."
				},
				"renounceOwnership()": {
					"details": "Allows the current owner to relinquish control of the contract."
				},
				"totalSupply()": {
					"details": "See `IERC20.totalSupply`."
				},
				"transfer(address,uint256)": {
					"details": "See `IERC20.transfer`.      * Requirements:      * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See `IERC20.transferFrom`.      * Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`;      * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
				},
				"transferOwnership(address)": {
					"details": "Allows the current owner to transfer control of the contract to a newOwner.",
					"params": {
						"newOwner": "The address to transfer ownership to."
					}
				},
				"tryTicket(uint8[])": {
					"details": "Moves a token from the balance of the function caller and adds it to the `_totalSupply`.Checks if the `numbers` are the same as the 5 randomly generated numbers.    * Calls function `equal()` to check if the 2 sets of numbers are the same.    * Calls win() if the numbers are the same as the ones generated."
				},
				"updateFee(uint8)": {
					"details": "Changes the current `exchangeFee` to the `newFee`.    * It can be called only by the owner."
				},
				"updateRetainedPrize(uint8)": {
					"details": "Changes the current `retainPrize` to the `newRetainedPrize`.    * It can be called only by the owner and can't be greater than 30 and less than 10."
				},
				"withdrawEarnings()": {
					"details": "Moves the earned amount of wei from the contract to the caller's account.    * Only the owner can withdraw and can't withdraw from the prize pool. Returns the amount transfered."
				}
			}
		},
		"userdoc": {
			"methods": {
				"renounceOwnership()": {
					"notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Lottery.sol": "Lottery"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/ERC20.sol": {
			"keccak256": "0x2ac91fee74ce57058e589dd6b7cc3cbaee58de16a55b85ca8944c89dc59f83d5",
			"urls": [
				"bzz-raw://f75fe2d4fad3b1535b674be77bf8d8b0e5f875ae344c3090dc3f5dd69ffd6c22",
				"dweb:/ipfs/QmXRikPd2ajm79rBX3dkvw48DrR2wVVoLzSu7WMbiHPTVU"
			]
		},
		"contracts/IERC20.sol": {
			"keccak256": "0xe2b5bbec7f5d00fb903ebdafaf8229fc7b54283f88a0bc8587eedaae6c5f2649",
			"urls": [
				"bzz-raw://c3412d5821ff17dc00e607f43bf60c2b821ce603944801056a54ae6f8d07d304",
				"dweb:/ipfs/QmbvepVioYisYjf9aqnB6dbjMV3qa2p2nSGHKWp9s62iRz"
			]
		},
		"contracts/Lottery.sol": {
			"keccak256": "0x509122f5e08e8b3191f9416e0fe5eabba6113b1c60d0f5cb0521c72db2900281",
			"urls": [
				"bzz-raw://670eb3efafe5adf3b1fc130345631e21dee20f0f7201d3d5386b29aae3d857f6",
				"dweb:/ipfs/QmZYiE27DHiefao165E8TyhZ5weT3RETifavGqvW6qwP3c"
			]
		},
		"contracts/LotteryTokens.sol": {
			"keccak256": "0x8545256710fe190f5ae68dd7ee22be3ddd37b065aad94814238866786b0bba72",
			"urls": [
				"bzz-raw://12867765504c180d7976a22f509d8dceccdc14b602df2fd0f328f80f780cdfb4",
				"dweb:/ipfs/QmQ17JSxHUhHBYde81E4J4GeiZf9W3jWb4bVP556CoGQxh"
			]
		},
		"contracts/SafeMath.sol": {
			"keccak256": "0x65c26f40fc0d080b3966d5af1f2eb8a2ef90f0500afd02b0953d5b4917a6dbe0",
			"urls": [
				"bzz-raw://5da213b5ffb7592b5a5a8b9ee8f6f1f77613536848541206bc8f2b19e50e815a",
				"dweb:/ipfs/QmauE1Gieu5eNwz3m3cFuzt9diAGMapNEQ6WfkFeAeKYA5"
			]
		},
		"contracts/ownable.sol": {
			"keccak256": "0xa6b19a2bb822fc6d9fb7f1c5b78ef15a9c03bdace058f391fb77ce9c230f69e2",
			"urls": [
				"bzz-raw://0ff962115040885c4cb6f1fe8a5f265ccd8541c38efe5de3f3a3b2ac1d93eea6",
				"dweb:/ipfs/QmYtcGCuT3Ky2xmhgLqSinzwaVKwBFFWqTQmPh3qZMLAtG"
			]
		}
	},
	"version": 1
}